-module({{packageName}}_router).

-export([get_paths/1]).

-type operations() :: #{
    Method :: binary() => OperationID :: {{packageName}}:operation_id()
}.

-type handler() :: module() | {module(), _Opts}.

-type init_opts()  :: {
    Operations   :: operations(),
    LogicHandler :: handler()
}.

-export_type([init_opts/0]).

-spec get_paths(LogicHandlers :: #{atom() => handler()}) ->  [{'_',[{
    Path :: string(),
    Handler :: atom(),
    InitOpts :: init_opts()
}]}].

get_paths(LogicHandlers) ->
    PreparedPaths = maps:fold(
        fun(Path, #{operations := Operations, handler := Handler, key := Key}, Acc) ->
            [{Path, Handler, {Key, Operations}} | Acc]
        end,
        [],
        group_paths()
    ),
    [
        {'_',
            [{P, H, {O, maps:get(K, LogicHandlers)}} || {P, H, {K, O}} <- PreparedPaths]
        }
    ].

group_paths() ->
    maps:fold(
        fun(OperationID, #{path := Path, method := Method, handler := Handler, key := Key}, Acc) ->
            case maps:find(Path, Acc) of
                {ok, PathInfo0 = #{operations := Operations0}} ->
                    Operations = Operations0#{Method => OperationID},
                    PathInfo = PathInfo0#{operations => Operations},
                    Acc#{Path => PathInfo};
                error ->
                    Operations = #{Method => OperationID},
                    PathInfo = #{handler => Handler, operations => Operations, key => Key},
                    Acc#{Path => PathInfo}
            end
        end,
        #{},
        get_operations()
    ).

get_operations() ->
    #{ {{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}
        '{{operationId}}' => #{
            path => "{{basePathWithoutHost}}{{path}}",
            method => <<"{{httpMethod}}">>,
            handler => '{{classname}}',
            key     => '{{classVarName}}'
        }{{#hasMore}},{{/hasMore}}{{/operation}}{{#hasMore}},{{/hasMore}}{{/operations}}{{/apis}}{{/apiInfo}}
    }.
